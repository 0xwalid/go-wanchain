// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"
	"crypto/ecdsa"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
)
//r@zy:如果不能实现根据条件的自动marshal,unmarshal部分字段，就把这个硬编码
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		AccountNonce hexutil.Uint64  `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     *hexutil.Big    `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		PublicKeys   []*hexutil.Big  `json:"publicKeys,omitempty"`
		KeyImage     []*hexutil.Big  `json:"keyImage,omitempty"`
		Wrandom      []*hexutil.Big  `json:"w_random,omitempty"`
		Qrandom      []*hexutil.Big  `json:"q_random,omitempty"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var enc txdata
	enc.AccountNonce = hexutil.Uint64(t.AccountNonce)
	enc.Price = (*hexutil.Big)(t.Price)
	enc.GasLimit = (*hexutil.Big)(t.GasLimit)
	enc.Recipient = t.Recipient
	enc.Amount = (*hexutil.Big)(t.Amount)
	enc.Payload = t.Payload
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)

	if t.AccountNonce == uint64(0) {
		enc.PublicKeys = crypto.PublicKeyToInt(t.PublicKeys...)

		for i := 0; i < len(t.PublicKeys); i++ {
			w := t.W_random[i]
			q := t.Q_random[i]

			enc.Wrandom = append(enc.Wrandom, (*hexutil.Big)(w))
			enc.Qrandom = append(enc.Qrandom, (*hexutil.Big)(q))
		}
		enc.KeyImage = crypto.PublicKeyToInt(t.KeyImage)
	}
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		AccountNonce *hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     *hexutil.Big    `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		PublicKeys   []*hexutil.Big  `json:"publicKeys,omitempty"`
		KeyImage     []*hexutil.Big  `json:"keyImage,omitempty"`
		Wrandom      []*hexutil.Big  `json:"w_random,omitempty"`
		Qrandom      []*hexutil.Big  `json:"q_random,omitempty"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for txdata")
	}
	t.AccountNonce = uint64(*dec.AccountNonce)
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = (*big.Int)(dec.Price)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = (*big.Int)(dec.GasLimit)
	if dec.Recipient != nil {
		t.Recipient = dec.Recipient
	}
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = (*big.Int)(dec.Amount)
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = dec.Payload
	if dec.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = (*big.Int)(dec.S)

	if t.AccountNonce == uint64(0) {
		t.PublicKeys = *new([]*ecdsa.PublicKey)
		t.W_random = *new([]*big.Int)
		t.Q_random = *new([]*big.Int)
		t.KeyImage = new(ecdsa.PublicKey)

		for i := 0; i < len(dec.PublicKeys)/2; i++ {
			buffer := new(ecdsa.PublicKey)
			t.PublicKeys = append(t.PublicKeys, buffer)
			t.PublicKeys[i].X = (*big.Int)(dec.PublicKeys[2*i])
			t.PublicKeys[i].Y = (*big.Int)(dec.PublicKeys[2*i+1])
			t.PublicKeys[i].Curve = crypto.S256()
			buffer1 := new(big.Int)
			t.W_random = append(t.W_random, buffer1)
			t.W_random[i] = (*big.Int)(dec.Wrandom[i])
			buffer2 := new(big.Int)
			t.Q_random = append(t.Q_random, buffer2)
			t.Q_random[i] = (*big.Int)(dec.Qrandom[i])
		}

		t.KeyImage.X = (*big.Int)(dec.KeyImage[0])
		t.KeyImage.Y = (*big.Int)(dec.KeyImage[1])
		t.KeyImage.Curve = crypto.S256()
	}
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	return nil
}
