// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6f\x8f\xdb\x36\xd2\x7f\xed\x7c\x8a\xa9\x9e\xb4\x6b\x63\x57\xd2\x6e\x36\x48\x0b\xaf\xe4\x22\x48\xfb\xa4\x3d\x1c\xda\xa2\x4d\x91\x2b\xda\xe2\x40\x49\x23\x89\x59\x8a\x54\xc9\x91\xbd\xae\xe1\xef\x7e\x20\x29\xc9\xb2\x77\x37\xcd\x5d\x9a\x17\x8e\x48\xce\xfc\x66\x38\x33\x9a\x3f\xda\xe4\x93\xaf\xbe\x7f\xf5\xe6\x97\x1f\xbe\x86\x9a\x1a\xb1\x7a\x92\xd8\xff\x40\x30\x59\xa5\x01\xca\x60\xf5\x64\x96\xd4\xc8\x8a\xd5\x93\xd9\x2c\x69\x90\x18\xe4\x35\xd3\x06\x29\x0d\x3a\x2a\xc3\x2f\x82\xc3\x41\x4d\xd4\x86\xf8\x47\xc7\xd7\x69\xf0\xaf\xf0\xe7\x97\xe1\x2b\xd5\xb4\x8c\x78\x26\x30\x80\x5c\x49\x42\x49\x69\xf0\xed\xd7\x29\x16\x15\x4e\xf8\x24\x6b\x30\x0d\xd6\x1c\x37\xad\xd2\x34\x21\xdd\xf0\x82\xea\xb4\xc0\x35\xcf\x31\x74\x8b\x0b\xe0\x92\x13\x67\x22\x34\x39\x13\x98\x5e\x05\xab\x27\x16\x87\x38\x09\x5c\xed\x76\xd1\x77\x48\x1b\xa5\x6f\xf7\xfb\x25\xbc\xe6\xf4\x4d\x97\xc1\xff\xb3\x2e\x47\x4a\x62\x4f\xe2\xa8\x05\x97\xb7\x50\x6b\x2c\xd3\xc0\xea\x6c\x96\x71\x9c\x17\xf2\x9d\x89\x72\xa1\xba\xa2\x14\x4c\x63\x94\xab\x26\x66\xef\xd8\x5d\x2c\x78\x66\x62\xda\x70\x22\xd4\x61\xa6\x14\x19\xd2\xac\x8d\xaf\xa3\xeb\xe8\xf3\x38\x37\x26\x1e\xf7\xa2\x86\xcb\x28\x37\x26\x00\x8d\x22\x0d\x0c\x6d\x05\x9a\x1a\x91\x02\x88\x57\xff\x9b\xdc\x52\x49\x0a\xd9\x06\x8d\x6a\x30\x7e\x1e\x7d\x1e\x5d\x3a\x91\xd3\xed\xf7\x4b\xb5\x62\x4d\xae\x79\x4b\x60\x74\xfe\xc1\x72\xdf\xfd\xd1\xa1\xde\xc6\xd7\xd1\x55\x74\xd5\x2f\x9c\x9c\x77\x26\x58\x25\xb1\x07\x5c\x7d\x14\x76\x28\x15\x6d\xe3\x67\xd1\xf3\xe8\x2a\x6e\x59\x7e\xcb\x2a\x2c\x06\x49\xf6\x28\x1a\x36\xff\x36\xb9\x8f\xf9\xf0\xdd\xa9\x0b\xff\x0e\x61\x8d\x6a\x50\x52\xf4\xce\xc4\xcf\xa2\xab\x2f\xa2\xcb\x61\xe3\x3e\xbe\x13\x60\x9d\x66\x45\xcd\xa2\x35\x6a\xe2\x39\x13\x61\x8e\x92\x50\xc3\xce\xee\xce\x1a\x2e\xc3\x1a\x79\x55\xd3\x12\xae\x2e\x2f\x3f\xbd\x79\x68\x77\x5d\xfb\xed\x82\x9b\x56\xb0\xed\x12\x4a\x81\x77\x7e\x8b\x09\x5e\xc9\x90\x13\x36\x66\x09\x1e\xd9\x1d\xec\x9d\xcc\x56\xab\x4a\xa3\x31\xbd\xb0\x56\x19\x4e\x5c\xc9\xa5\x8d\x28\x46\x7c\x8d\x0f\xd1\x9a\x96\xc9\x7b\x0c\x2c\x33\x4a\x74\x84\x27\x8a\x64\x42\xe5\xb7\x7e\xcf\xbd\xc6\xd3\x4b\xe4\x4a\x28\xbd\x84\x4d\xcd\x7b\x36\x70\x82\xa0\xd5\xd8\xc3\x43\xcb\x8a\x82\xcb\x6a\x09\x2f\xda\xfe\x3e\xd0\x30\x5d\x71\xb9\x84\xcb\x03\x4b\x12\x0f\x66\x4c\x62\x9f\xb1\x9e\xcc\x92\x4c\x15\x5b\xe7\xc3\x82\xaf\x21\x17\xcc\x98\x34\x38\x31\xb1\xcb\x44\x47\x04\x36\x01\x31\x2e\x87\xa3\xa3\x33\xad\x36\x01\x38\x41\x69\xe0\x95\x08\x33\x45\xa4\x9a\x25\x5c\x59\xf5\x7a\x96\x13\x3c\x11\x8a\x2a\xbc\x7a\x36\x1c\xce\x92\xfa\x6a\x00\x21\xbc\xa3\xd0\xf9\x67\xf4\x4c\xb0\x4a\xf8\xc0\x5b\x32\x28\x59\x98\x31\xaa\x03\x60\x9a\xb3\xb0\xe6\x45\x81\x32\x0d\x48\x77\x68\xe3\x88\xaf\x60\x9a\xf7\x86\xb4\xf7\xb2\xa3\x1a\xa5\xbd\x27\x61\xd1\x27\x41\x38\x85\xad\x38\xd5\x5d\x16\x32\x41\x8f\x82\x27\x71\x7d\x35\x5c\x29\x2e\xf8\xba\xb7\xc8\xe4\xf1\xc4\x38\x8f\xdf\xff\x0b\xe8\x1f\x54\x59\x1a\xa4\x70\x62\x8e\x09\x31\x97\x6d\x47\x61\xa5\x55\xd7\x8e\xe7\xb3\xc4\xed\x02\x2f\xd2\xa0\xe2\x86\x02\xa0\x6d\xdb\xdb\x2e\x18\xaf\xa4\x74\x13\x5a\xd7\x69\x25\x02\x68\x05\xcb\xb1\x56\xa2\x40\x9d\x06\xbd\x4d\x5e\x73\x43\xf0\xf3\x8f\xff\x84\xde\xc1\x5c\x56\xb0\x55\x9d\x06\x56\x14\x36\xa6\xa3\x28\x9a\x88\x74\x01\x7e\x5f\xa9\x30\x23\x79\xa0\x9a\x25\x59\x47\xa4\x46\xc2\x8c\x24\x64\x24\xc3\x02\x4b\xd6\x09\x82\x42\xab\xb6\x50\x1b\x19\x92\xaa\x2a\x5b\x07\xbd\xe2\x9e\x29\x80\x82\x11\xeb\x8f\xd2\x60\xa0\x1d\x7c\xc1\x4c\xab\xda\xae\xed\xbd\xe1\x37\xf1\xae\x65\xb2\xc0\xc2\x7a\x50\x18\x0c\x56\xaf\xf9\x1a\xa1\x41\x78\xcb\xe4\xec\xd4\xbd\x39\xd3\x48\xe1\x14\xf2\x01\xf7\x7a\x55\xfc\x85\xa0\xff\x97\x74\x62\x40\x1a\x2f\xd0\xa0\xec\xe0\x68\x15\x6a\x9b\x7a\x82\xd5\x6e\xa7\x99\xac\x10\x9e\xf2\xe2\xee\x02\x9e\xb2\x46\x75\x92\x60\x99\x42\xf4\xd2\x3d\x9a\xfd\xfe\x08\x1d\x20\x11\x7c\x95\xb0\xf7\xbd\x01\xa0\x64\x2e\x78\x7e\x9b\x06\xc4\x51\xa7\xbb\x9d\x05\xdf\xef\x6f\x60\xb7\xe3\x25\x3c\x8d\x7e\xc4\x9c\xb5\x94\xd7\x6c\xbf\xaf\xf4\xf0\x1c\xe1\x1d\xe6\x1d\xe1\x7c\xb1\xdb\xa1\x30\xb8\xdf\x9b\x2e\x6b\x38\xcd\x07\x76\xbb\x2f\x8b\xfd\xde\xea\xdc\xeb\xb9\xdf\x43\x6c\x41\x65\x81\x77\xf0\x34\xfa\x01\x35\x57\x85\x01\x4f\x9f\xc4\x6c\x95\xc4\x82\xaf\x7a\xbe\x63\x23\xc5\x9d\x38\x44\x4b\x6c\xc3\x65\x8c\x67\xf7\x7a\x38\x55\xa7\x9a\x3e\x10\xed\x55\x38\x6a\xdf\x47\x83\xe1\x84\xb7\xb8\x4d\x83\xdd\x6e\xca\xdb\x9f\xe6\x4c\x88\x8c\x59\xbb\xf8\xab\x8d\x4c\x7f\xa2\x8d\xd2\x35\x37\xae\xdd\x5a\x0d\x1a\x1c\xd4\xfe\xc0\xd7\xf7\x24\xb7\x91\x6a\x97\x70\xfd\x6c\x92\xd8\x1e\x7a\xb3\x5f\x9c\xbc\xd9\xd7\x0f\x12\xb7\x4c\xa2\x00\xf7\x1b\x9a\x86\x89\xe1\xb9\x7f\x57\x26\xaf\xde\x29\x53\x68\xd3\xf8\xa8\xda\x58\x0e\x2e\x6f\x40\xad\x51\x97\x42\x6d\x96\xc0\x3a\x52\x37\xd0\xb0\xbb\xb1\x24\x5e\x5f\x5e\x4e\xf5\xb6\x6d\x22\xcb\x04\xba\x2c\xa2\xf1\x8f\x0e\x0d\x99\x31\x7b\xf8\x23\xf7\x6b\x93\x48\x81\xd2\x60\x71\x62\x0d\x2b\xd1\x9a\xd6\x51\x4d\x5c\x3f\x1a\xf3\x41\xdd\x4b\xa5\xc6\x2a\x33\x55\xa3\x87\x9e\x14\xc4\x60\x95\x90\x3e\xd0\xcd\x12\x2a\xfe\xab\x2a\xa1\x6d\x17\xf8\x58\x91\xf0\xf9\xcc\xde\xbd\x45\xd4\xbe\x05\xb1\x21\x0b\x6e\x99\xc4\x54\x7c\x84\x64\x1b\x84\x19\x33\xf8\x21\xe2\x5d\x33\x70\x10\xef\x96\x1f\x2b\xbf\x46\xa6\x29\x43\xf6\x78\x1d\x9b\x28\x50\x76\xb2\x98\xdc\xff\x2d\x93\x1f\x2b\xbe\x93\x7c\x8d\xda\x70\xda\x7e\xa8\x7c\x2c\x0e\x0a\xf8\xf5\xb1\x0a\x49\x4c\xfa\xfd\x91\x36\x5d\xfc\x4d\xaf\xf6\x5f\xf5\x2c\xd7\xab\x6f\xd4\x06\x0a\x85\x06\xa8\xe6\x06\x6c\xc7\xf1\x65\x12\xd7\xd7\x23\x49\xbb\x7a\x63\x0f\xde\x32\x99\xd7\x8c\x4b\x28\x7d\xdf\xc1\x0d\xe8\x4e\xba\x7a\xab\x24\x50\x8d\xc7\x2d\x8b\xf4\x4f\x11\xbc\x51\xb6\xed\x5b\xa3\x24\x68\x98\xe0\x39\x57\x9d\x01\x96\x93\xd2\x06\x4a\xad\x1a\xc0\xbb\x9a\x75\x86\x2c\x90\xcd\x1f\x6c\xcd\xb8\x70\x2f\x93\xf3\x29\x28\x0d\x2c\xcf\xbb\xa6\xb3\x6d\xab\xac\x00\xa5\xea\xaa\xda\xaa\x03\xa4\xc0\xd7\x25\xa1\x64\x35\x6a\x63\x5a\xd6\x00\x23\x62\xf9\xad\xb9\x80\x21\x29\x00\xd3\x08\xc4\xb1\xb0\x5c\x7d\xef\xc0\xf2\xdc\xd5\xb2\x08\x5e\xca\xad\x92\x08\x35\x5b\x3b\x35\x4e\x08\xa0\x61\xdb\x01\xa8\xd7\x6a\xc3\xa9\xe6\xfe\xda\x2d\xea\xc6\x4e\x21\x05\x08\xde\x70\x32\x51\x12\xb7\x53\xe3\xa9\x63\xd6\x0b\x30\xbc\x69\xc5\x16\x72\x8d\x8c\x10\x18\x24\xec\x64\x80\xb4\xed\x50\xe4\xfb\x38\x37\x82\x04\x40\x4c\x57\x76\x3c\xff\x37\xcb\x54\x47\xcb\x4c\x30\x79\x6b\xfb\x84\xb1\x05\xb2\x55\xcd\x29\xe5\x9b\x9f\xd1\x59\x7d\x17\x04\x2d\x33\x56\x43\x2e\x49\x39\xa5\xfb\x79\xdc\xc0\xdc\xae\x4a\x2e\xd0\x8d\xec\x2e\x10\xe4\x99\xbd\xb1\x9d\xab\x16\x17\x90\xab\x76\xeb\xb9\x1d\x9f\x55\xcd\xb8\x7e\x6b\x84\x62\x99\x5a\x23\xf8\x66\x2e\x53\x77\xc0\x64\x01\x25\xd7\x08\x6c\xc3\xb6\x9f\xc0\x2f\xaa\x83\xdc\x3a\x4b\xb3\xfc\xd6\xcb\xee\xb4\xb6\xe1\xd0\xa2\xb4\x39\xff\xe0\xa2\x0c\x85\xda\x38\x12\x8f\x56\x72\x14\xce\x5f\x06\x11\x6a\xb5\x81\xa6\xcb\xdd\x05\xad\xa3\xd0\x1e\x6c\x18\x27\xe8\x24\x71\xe1\xef\x4d\x9d\x96\x90\xab\x06\x8f\xbc\x70\xaf\x68\x27\xd8\xac\xde\xd8\x7b\xdf\x0b\xe5\xb1\xdc\x82\xc6\x57\x9e\x1c\x5a\xad\x08\x73\x3b\x0c\x01\xab\x18\x97\xc6\xde\xd3\xf9\x19\x9b\x0f\x28\xc7\xe3\x53\xff\x70\x98\x3e\xdd\x71\x1c\xc3\x6b\xa1\x32\x26\x60\x6d\xd3\x4c\x26\xec\x9b\xa8\xc0\xb6\xb9\x47\xd6\x32\xc4\xa8\x33\xa0\x4a\xb7\xeb\x35\xb7\xfc\x6b\xa6\x6d\xb4\x63\xd3\x12\xa4\xfd\xec\x64\xf7\x0c\xea\x75\x3f\x11\xda\xa5\x6d\xb9\xfc\x79\x2f\xf4\x2b\x2c\xb9\xf4\x4e\x2d\x3b\xe9\xaf\x47\x35\x23\xf0\x4d\x88\x01\xe6\x9c\x0d\x9d\x16\xd0\x7b\xda\x43\x8e\x02\x1c\x1d\xa4\x23\xfb\xfc\x9e\x9d\xfb\x87\xde\x46\x8b\x7e\xf6\xf3\x30\x91\x41\x59\xcc\xff\xf1\xd3\xf7\xdf\x45\x86\x34\x97\x15\x2f\xb7\xf3\x5d\xa7\xc5\x12\x9e\xce\x83\xff\x73\x23\xc1\xe2\xd7\xcb\xdf\xa3\x35\x13\x1d\x5e\xb8\x0b\x2c\xdd\xef\x3d\x31\x17\xd0\x3f\x2e\xe1\x58\xe2\x7e\xb1\xb8\x79\xb8\x63\x9b\x34\x98\x1a\x0d\xd2\xdc\x12\x8e\x9e\xdc\xdf\x1c\x1b\x89\x41\x83\x54\x2b\x17\x8b\x1a\x73\x25\x25\xe6\x04\x5d\xab\x64\x6f\x13\x10\xca\x98\xc1\x30\x07\x8a\x89\x6d\x86\xcb\xf3\x12\xe6\x83\xbb\x3e\x85\x67\x90\xa6\x70\x39\x9c\xf5\x96\x81\x14\x24\x6e\xe0\x2d\x66\x3f\xa9\xfc\x16\x69\x1e\x6c\x8c\x4d\x0b\x01\x9c\x83\x50\x39\xb3\x78\x51\xad\x0c\xc1\x39\x04\x31\x6b\x79\xb0\xf0\x13\xf4\x1e\x6c\x87\xfc\xd7\x60\x1f\x84\xe5\xbf\x31\x78\x4d\xcf\xcf\x7d\xd8\x0c\xae\x53\xb2\x41\x63\x58\x85\xd3\x1b\xba\x1c\x3f\x5e\xc5\x1a\xa2\x31\x15\xa4\xe0\x5c\xdc\x32\x6d\xd0\x93\x44\xb6\xb1\xe8\xa5\x38\x73\x38\xb2\x34\x05\xd9\x09\x31\xf2\xcf\x34\xda\x97\xb9\x27\xdb\x3f\x39\x22\x8f\x7c\x12\xfe\x24\x4d\xc1\xd6\x59\xeb\xa3\xe2\xc0\x69\xc3\xc7\xf7\x03\x8b\xc8\x96\xfa\x03\xc7\x62\x84\xbb\x87\x86\xc5\x5f\xc1\x61\x71\x8a\x87\xc5\x23\x80\xae\xfd\x7a\x1f\x9e\x6f\xd7\x26\x70\x6e\xe3\x11\x34\xd9\x35\x19\xea\xf7\xc1\xf9\xf6\xab\x87\x73\xa6\xfe\x56\xd2\x84\xf7\x02\xae\x5e\x2c\x1e\x41\x47\xad\xd5\xa3\xe0\x52\xd1\x76\xbe\x13\x6c\x6b\xab\x0e\x9c\x91\x6a\x5f\xb9\x7e\xe9\xec\x02\xac\xac\x25\x8c\x08\x17\x6e\x0a\x5e\xc2\x99\x5b\x9d\xed\x1f\x91\x66\xba\x3c\xb7\xf5\xe8\x63\xe4\xf5\x18\xa3\xc4\x7e\xfd\xa8\xcc\xb1\xbe\x1c\x09\x85\xcf\x3e\x83\x7b\xa7\xc7\x21\x68\x63\xb8\x2f\x94\x90\x42\x10\xf4\xf0\xb3\x52\x69\x98\xdb\x43\x9e\x5e\xde\x00\x4f\xa6\x30\x91\x40\x59\x51\x7d\x03\xfc\xfc\xfc\x80\x34\x1b\x60\xce\x53\x08\xec\x40\x90\x50\xb1\x72\xad\x99\xef\xdf\x7e\x0b\xec\x00\x58\x69\xd5\xc9\x62\x69\x53\xee\xfc\xec\xd0\x0c\x4c\xfa\x80\xf3\x23\x95\x7f\xe5\xbf\x47\x9d\x41\xed\x2a\xf7\x39\x04\x51\x2b\xab\x2f\xdd\xd8\xf8\xe2\xf9\xd9\xe2\x06\x0e\x98\x6e\x98\x5c\x42\x6e\x47\xab\x1b\xf0\xe3\x89\x6b\x13\x61\x1c\xac\xdc\x2a\x53\xba\x40\x1d\x6a\x56\xf0\xce\x2c\xe1\x79\x7b\x77\xf3\xdb\x30\x78\xba\x66\xd6\xe9\xdd\x6a\x5c\x3d\xa4\xcb\xd0\x2e\x9d\x43\x90\xc4\x96\x68\x60\x19\x6f\x39\xfd\x52\x08\x0f\xb4\xe1\x30\x7e\xc7\xeb\xf7\x1b\x5e\x14\x02\xad\x12\x4e\xa0\xff\xe0\x5a\x74\xda\x25\xae\xb9\x5f\xcf\x4f\xf5\x20\xde\xe0\x22\xea\x24\xbf\x9b\x2f\xc2\x9e\x66\x58\x5f\xc0\x99\xb1\xf9\xb9\x30\x67\x8b\xa8\xee\x1a\x26\xf9\x9f\x38\xb7\x3d\xfd\xc2\xeb\x6d\x35\xb6\x8d\xfa\xe8\xed\xfd\xe4\x45\x1b\x47\xcc\x45\x54\x53\x23\xe6\x41\x42\xee\x6b\xa4\x55\x6e\x74\xb1\x43\xf1\xdb\xc7\x11\xb9\x3f\xce\xa1\xb9\x50\x06\x4f\x6a\x04\x18\xa4\x37\xbc\x41\xd5\xd1\x7c\xac\x23\x17\x76\xec\xbd\x5c\xdc\xc0\xfe\xf0\xd1\x36\x8e\xe1\x6b\x63\x47\x09\x6e\x6a\x60\xb0\xc1\xcc\xb8\xfc\x0e\x3d\x8f\x2b\xe7\xbe\x6c\xbf\xfc\xe1\xdb\x49\xe9\x1e\x51\xe7\x4e\xb9\xf1\xa3\xf5\x43\x75\xf2\xc1\xaf\xe4\x9b\xcd\x26\xaa\x94\xaa\x84\xff\x3e\x3e\x16\x52\x5b\x3d\xa2\x77\x76\x5a\x35\x5b\x99\x43\x81\x25\xea\xd5\x04\xbe\xaf\xae\x49\xec\xbf\xdf\x26\xb1\xff\xdb\xd4\x7f\x02\x00\x00\xff\xff\x7c\xc4\xd3\x36\xac\x1a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 6828, mode: os.FileMode(511), modTime: time.Unix(1512716343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

